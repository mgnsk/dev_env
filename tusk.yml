options:
  dot_commit:
    default: 7daa56e784baecaf8e0360fc1b905483a6044b36

tasks:
  build:
    run:
    - command: >
        docker
        build
        --pull
        --build-arg dot_commit=${dot_commit}
        -t mgnsk/dev-env:latest
        ./image

  _create-volume:
    usage: Create a volume if not exists.
    private: yes
    args:
      name:
        usage: Volume name
    run:
      command: >
        if ! docker volume ls | awk 'NR!=1 { print $2 }' | grep -q ${name}; then
          docker volume create ${name}
        fi

  bash:
    usage: Run a bash shell as host user user.
    description: The user is created and permissions set on entry.
    options:
      uid:
        default:
          command: id -u
      user:
        default:
          command: id -un
      gid:
        default:
          command: id -g
      group:
        default:
          command: id -gn
    run:
    - command: mkdir -p ./code
    - task:
        name: _create-volume
        args:
          - dev-env_ssh-key
    - task:
        name: _create-volume
        args:
          - dev-env_coc-data
    - task:
        name: _create-volume
        args:
          - dev-env_nvim-shada
    - task:
        name: _create-volume
        args:
          - dev-env_direnv-allow-cache
    - command: >
        docker run
        --rm
        --cap-drop=ALL
        --cap-add=CAP_SETUID
        --cap-add=CAP_SETGID
        --cap-add=CAP_FOWNER
        --cap-add=CAP_CHOWN
        -it
        --entrypoint /asuser.sh
        --hostname dev-env
        -e UID=${uid}
        -e USER=${user}
        -e GID=${gid}
        -e GROUP=${group}
        -w /code
        --mount type=bind,source="$(pwd)/code",target=/code
        --mount type=volume,source=dev-env_ssh-key,target=/homedir/.ssh
        --mount type=volume,source=dev-env_coc-data,target=/homedir/.config/coc
        --mount type=volume,source=dev-env_nvim-shada,target=/homedir/.local/share/nvim/shada
        --mount type=volume,source=dev-env_direnv-allow-cache,target=/homedir/.local/share/direnv
        mgnsk/dev-env
        /bin/bash

  clean:
    run:
    - command: docker rmi mgnsk/dev-env

  push:
    run:
      command: |
        echo "$DOCKER_TOKEN" | docker login -u mgnsk --password-stdin
        docker push mgnsk/dev-env:latest
